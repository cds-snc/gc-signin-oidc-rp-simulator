name: TEST RP Simulator Docker Build and Push to ECR

on:
  push:
    branches:
      - main
    paths:
      - "simple-rp-simulator/**"
      - ".github/workflows/rp-docker-build-push-ecr-test.yml"

env: 
  AWS_REGION: ca-central-1
  TAG_NAME: gc-signin-test-rp-sim
  ECS_SERVICE: gc-signin-test__rp_sim_ecs_cluster_service
  ECS_CLUSTER: gc-signin-test_rp_sim_ecs_cluster
  ECR: ${{ vars.TEST_AWS_ACCOUNT_ID }}.dkr.ecr.ca-central-1.amazonaws.com/gc-signin-test-rp-sim
  GITHUB_SHA: ${{ github.sha }}

permissions:
  id-token: write
  contents: write
  
jobs:
  docker-push:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - name: Audit DNS requests
      uses: cds-snc/dns-proxy-action@main
      env:
        DNS_PROXY_FORWARDTOSENTINEL: "true"
        DNS_PROXY_LOGANALYTICSWORKSPACEID: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
        DNS_PROXY_LOGANALYTICSSHAREDKEY: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}

    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: configure aws credentials using OIDC role
      uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
      with:
        role-to-assume: arn:aws:iam::${{ vars.TEST_AWS_ACCOUNT_ID }}:role/gc-signin-user-selfservice-webapp-apply
        role-session-name: ECRPush 
        aws-region: ${{ env.AWS_REGION }}

    - name: Build Docker image
      working-directory: ./simple-rp-simulator/
      run: |
        docker build \
        --tag $ECR:$GITHUB_SHA \
        --tag $ECR:latest .

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1 

    - name: Push Container to Amazon ECR
      run: |
        docker push $ECR:$GITHUB_SHA
        docker push $ECR:latest

    - name: Docker generate SBOM
      uses: cds-snc/security-tools/.github/actions/generate-sbom@34794baf2af592913bb5b51d8df4f8d0acc49b6f # v3.2.0
      env:
        TRIVY_DB_REPOSITORY: ${{ vars.TRIVY_DB_REPOSITORY }}
      with:
        docker_image: "${{ env.ECR }}:latest"
        dockerfile_path: simple-rp-simulator/Dockerfile
        sbom_name: ${{ env.TAG_NAME }}
        token: "${{ secrets.GITHUB_TOKEN }}"

    - name: Download ECS task definition
      run: |
          aws ecs describe-task-definition \
            --task-definition ${{env.ECS_SERVICE}} \
            --query taskDefinition > task-definition.json
  
    - name: Update ECS task image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@acd72bc11233ac43bac45ddb7b8e54ada737e6cd # v1.7.4
      with:
        task-definition: task-definition.json
        container-name: ${{env.ECS_SERVICE}}
        image: ${{ env.ECR }}:${{ env.GITHUB_SHA }}
  
    - name: Deploy updated ECS task
      uses: aws-actions/amazon-ecs-deploy-task-definition@f7b2b96b7fe1b20b452641919c0559bcc19ab8f9 # v2.3.3
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        propagate-tags: SERVICE
